// This file is automatically generated from the contents of `/src` using `/src/compile.js`

// @ts-ignore
let parser = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { regexp: peg$parseregexp },
        peg$startRuleFunction  = peg$parseregexp,

        peg$c0 = null,
        peg$c1 = "",
        peg$c2 = "|",
        peg$c3 = "\"|\"",
        peg$c4 = function(match, alternate) { return alternate ? new Alternate(match, alternate[1]) : match },
        peg$c5 = [],
        peg$c6 = function(start, match, end) { return new Match([start].concat(match).concat([end])) },
        peg$c7 = "^",
        peg$c8 = "\"^\"",
        peg$c9 = function() { return new Token('start') },
        peg$c10 = "$",
        peg$c11 = "\"$\"",
        peg$c12 = function() { return new Token('end') },
        peg$c13 = function(submatch, quantifier) { return new Quantified(submatch, quantifier)},
        peg$c14 = "Quantifier",
        peg$c15 = function(quantity, lazy, possessive) {
          if(lazy){
            if(quantity.text == '?'){
              // Throw a Syntax error
              throw new SyntaxError(
                peg$maxFailExpected,
                peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
                peg$reportedPos,
                peg$computePosDetails(peg$reportedPos).line,
                peg$computePosDetails(peg$reportedPos).column
              );
            }

            quantity.lazy = true
          }
          if(possessive){
            quantity.possessive = true
          }
          return quantity
        },
        peg$c16 = "{",
        peg$c17 = "\"{\"",
        peg$c18 = ",",
        peg$c19 = "\",\"",
        peg$c20 = "}",
        peg$c21 = "\"}\"",
        peg$c22 = function(min, max) { return new Quantifier(min, max)},
        peg$c23 = ",}",
        peg$c24 = "\",}\"",
        peg$c25 = function(min) { return new Quantifier(min, Infinity)},
        peg$c26 = function(value) { return new Quantifier(value, value)},
        peg$c27 = "+",
        peg$c28 = "\"+\"",
        peg$c29 = function() { return new Quantifier(1, Infinity)},
        peg$c30 = "*",
        peg$c31 = "\"*\"",
        peg$c32 = function() { return new Quantifier(0, Infinity)},
        peg$c33 = "?",
        peg$c34 = "\"?\"",
        peg$c35 = function() { return new Quantifier(0, 1)},
        peg$c36 = /^[0-9]/,
        peg$c37 = "[0-9]",
        peg$c38 = function(num) { return +num.join('') },
        peg$c39 = "(",
        peg$c40 = "\"(\"",
        peg$c41 = ")",
        peg$c42 = "\")\"",
        peg$c43 = function(body) { return body},
        peg$c44 = /^[adluimsx\-]/,
        peg$c45 = "[adluimsx\\-]",
        peg$c46 = ":",
        peg$c47 = "\":\"",
        peg$c48 = function(flags, regexp) { return new Group('non-capture-group', new Match([ new Group('flags', flags), regexp ])) },
        peg$c49 = function(flags) { return new Group('flags', flags)},
        peg$c50 = function(regexp) { return new CaptureGroup(regexp) },
        peg$c51 = "?:",
        peg$c52 = "\"?:\"",
        peg$c53 = function(regexp) { return new Group('non-capture-group', regexp) },
        peg$c54 = "?=",
        peg$c55 = "\"?=\"",
        peg$c56 = function(regexp) { return new Group('positive-lookahead', regexp) },
        peg$c57 = "?!",
        peg$c58 = "\"?!\"",
        peg$c59 = function(regexp) { return new Group('negative-lookahead', regexp) },
        peg$c60 = "?<=",
        peg$c61 = "\"?<=\"",
        peg$c62 = function(regexp) { return new Group('positive-lookbehind', regexp) },
        peg$c63 = "?<!",
        peg$c64 = "\"?<!\"",
        peg$c65 = function(regexp) { return new Group('negative-lookbehind', regexp) },
        peg$c66 = "?>",
        peg$c67 = "\"?>\"",
        peg$c68 = function(regexp) { return new Group('atomic-group', regexp) },
        peg$c69 = /^[A-Za-z_]/,
        peg$c70 = "[A-Za-z_]",
        peg$c71 = /^[A-Za-z0-9_]/,
        peg$c72 = "[A-Za-z0-9_]",
        peg$c73 = ">",
        peg$c74 = "\">\"",
        peg$c75 = function(name, regexp) { return new CaptureGroup(regexp, name) },
        peg$c76 = "?P<",
        peg$c77 = "\"?P<\"",
        peg$c78 = "?<",
        peg$c79 = "\"?<\"",
        peg$c80 = "CharacterSet",
        peg$c81 = "[",
        peg$c82 = "\"[\"",
        peg$c83 = "]",
        peg$c84 = "\"]\"",
        peg$c85 = function(invert, body) { return new CharSet(!!invert, body) },
        peg$c86 = "CharacterRange",
        peg$c87 = "-",
        peg$c88 = "\"-\"",
        peg$c89 = function(start, end) { return new CharacterRange(start, end) },
        peg$c90 = "CharacterClass",
        peg$c91 = "[:",
        peg$c92 = "\"[:\"",
        peg$c93 = "alnum",
        peg$c94 = "\"alnum\"",
        peg$c95 = "alpha",
        peg$c96 = "\"alpha\"",
        peg$c97 = "blank",
        peg$c98 = "\"blank\"",
        peg$c99 = "cntrl",
        peg$c100 = "\"cntrl\"",
        peg$c101 = "digit",
        peg$c102 = "\"digit\"",
        peg$c103 = "lower",
        peg$c104 = "\"lower\"",
        peg$c105 = "upper",
        peg$c106 = "\"upper\"",
        peg$c107 = "graph",
        peg$c108 = "\"graph\"",
        peg$c109 = "print",
        peg$c110 = "\"print\"",
        peg$c111 = "punct",
        peg$c112 = "\"punct\"",
        peg$c113 = "space",
        peg$c114 = "\"space\"",
        peg$c115 = "xdigit",
        peg$c116 = "\"xdigit\"",
        peg$c117 = ":]",
        peg$c118 = "\":]\"",
        peg$c119 = function(charclass) { return new CharacterClass(charclass)},
        peg$c120 = "Character",
        peg$c121 = /^[^\\\]]/,
        peg$c122 = "[^\\\\\\]]",
        peg$c123 = function(value) { return new Literal(value) },
        peg$c124 = ".",
        peg$c125 = "\".\"",
        peg$c126 = function() { return new Token('any-character') },
        peg$c127 = "Literal",
        peg$c128 = /^[^|\\.[()?+*$\^]/,
        peg$c129 = "[^|\\\\.[()?+*$\\^]",
        peg$c130 = "\\b",
        peg$c131 = "\"\\\\b\"",
        peg$c132 = function() { return new Token('backspace') },
        peg$c133 = function() { return new Token('word-boundary') },
        peg$c134 = "\\A",
        peg$c135 = "\"\\\\A\"",
        peg$c136 = function() { return new Token('begin-of-string') },
        peg$c137 = "\\Z",
        peg$c138 = "\"\\\\Z\"",
        peg$c139 = function() { return new Token('end-of-string-before-nl') },
        peg$c140 = "\\z",
        peg$c141 = "\"\\\\z\"",
        peg$c142 = function() { return new Token('end-of-string') },
        peg$c143 = "\\G",
        peg$c144 = "\"\\\\G\"",
        peg$c145 = function() { return new Token('match-start-position') },
        peg$c146 = "\\B",
        peg$c147 = "\"\\\\B\"",
        peg$c148 = function() { return new Token('non-word-boundary') },
        peg$c149 = "\\d",
        peg$c150 = "\"\\\\d\"",
        peg$c151 = function() { return new Token('digit') },
        peg$c152 = "\\D",
        peg$c153 = "\"\\\\D\"",
        peg$c154 = function() { return new Token('non-digit') },
        peg$c155 = "\\f",
        peg$c156 = "\"\\\\f\"",
        peg$c157 = function() { return new Token('form-feed') },
        peg$c158 = "\\n",
        peg$c159 = "\"\\\\n\"",
        peg$c160 = function() { return new Token('line-feed') },
        peg$c161 = "\\r",
        peg$c162 = "\"\\\\r\"",
        peg$c163 = function() { return new Token('carriage-return') },
        peg$c164 = "\\s",
        peg$c165 = "\"\\\\s\"",
        peg$c166 = function() { return new Token('white-space') },
        peg$c167 = "\\S",
        peg$c168 = "\"\\\\S\"",
        peg$c169 = function() { return new Token('non-white-space') },
        peg$c170 = "\\t",
        peg$c171 = "\"\\\\t\"",
        peg$c172 = function() { return new Token('tab') },
        peg$c173 = "\\v",
        peg$c174 = "\"\\\\v\"",
        peg$c175 = function() { return new Token('vertical-tab') },
        peg$c176 = "\\w",
        peg$c177 = "\"\\\\w\"",
        peg$c178 = function() { return new Token('word') },
        peg$c179 = "\\W",
        peg$c180 = "\"\\\\W\"",
        peg$c181 = function() { return new Token('non-word') },
        peg$c182 = "\\c",
        peg$c183 = "\"\\\\c\"",
        peg$c184 = "any character",
        peg$c185 = function(code) { return new ControlCharacter(code) },
        peg$c186 = "\\",
        peg$c187 = "\"\\\\\"",
        peg$c188 = /^[1-9]/,
        peg$c189 = "[1-9]",
        peg$c190 = function(code) { return new BackReference(code) },
        peg$c191 = "\\0",
        peg$c192 = "\"\\\\0\"",
        peg$c193 = /^[0-7]/,
        peg$c194 = "[0-7]",
        peg$c195 = function(code) { return new Octal(code.join('')) },
        peg$c196 = "\\x",
        peg$c197 = "\"\\\\x\"",
        peg$c198 = /^[0-9a-fA-F]/,
        peg$c199 = "[0-9a-fA-F]",
        peg$c200 = function(code) { return new Hex(code.join('')) },
        peg$c201 = "\\u",
        peg$c202 = "\"\\\\u\"",
        peg$c203 = function(code) { return new Unicode(code.join('')) },
        peg$c204 = "\\p{",
        peg$c205 = "\"\\\\p{\"",
        peg$c206 = /^[0-9a-zA-Z_]/,
        peg$c207 = "[0-9a-zA-Z_]",
        peg$c208 = function(code) { return new UnicodeCategory(code.join('')) },
        peg$c209 = "\\P{",
        peg$c210 = "\"\\\\P{\"",
        peg$c211 = function(code) { return new UnicodeCategory(code.join(''), true) },
        peg$c212 = function() { return new Token('null-character') },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parseregexp() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsematch();
      if (s1 !== null) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s3 !== null) {
          s4 = peg$parseregexp();
          if (s4 !== null) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === null) {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c4(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsematch() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsestart();
      if (s1 === null) {
        s1 = peg$c1;
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parsequantifier();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c1;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parsegroupFlags();
          if (s4 === null) {
            s4 = peg$parsequantified();
            if (s4 === null) {
              s4 = peg$parsesubmatch();
            }
          }
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parsegroupFlags();
            if (s4 === null) {
              s4 = peg$parsequantified();
              if (s4 === null) {
                s4 = peg$parsesubmatch();
              }
            }
          }
          if (s3 !== null) {
            s4 = peg$parseend();
            if (s4 === null) {
              s4 = peg$c1;
            }
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c6(s1,s3,s4);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesubmatch() {
      var s0;

      s0 = peg$parsesubexp();
      if (s0 === null) {
        s0 = peg$parsecharset();
        if (s0 === null) {
          s0 = peg$parseterminal();
        }
      }

      return s0;
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c9();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseend() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c12();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsequantified() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesubmatch();
      if (s1 !== null) {
        s2 = peg$parsequantifier();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c13(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequantifier() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsequantifierSpec();
      if (s1 !== null) {
        s2 = peg$parselazyFlag();
        if (s2 === null) {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = peg$parsepossessiveFlag();
          if (s3 === null) {
            s3 = peg$c1;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c15(s1,s2,s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }

      return s0;
    }

    function peg$parsequantifierSpec() {
      var s0;

      s0 = peg$parsequantifierSpecFull();
      if (s0 === null) {
        s0 = peg$parsequantifierSpecAtLeast();
        if (s0 === null) {
          s0 = peg$parsequantifierSpecExact();
          if (s0 === null) {
            s0 = peg$parsequantifierRequired();
            if (s0 === null) {
              s0 = peg$parsequantifierAny();
              if (s0 === null) {
                s0 = peg$parsequantifierOptional();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsequantifierSpecFull() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c16;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s1 !== null) {
        s2 = peg$parseinteger();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s3 !== null) {
            s4 = peg$parseinteger();
            if (s4 !== null) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c20;
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c21); }
              }
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c22(s2,s4);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequantifierSpecAtLeast() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c16;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s1 !== null) {
        s2 = peg$parseinteger();
        if (s2 !== null) {
          if (input.substr(peg$currPos, 2) === peg$c23) {
            s3 = peg$c23;
            peg$currPos += 2;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c25(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequantifierSpecExact() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c16;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s1 !== null) {
        s2 = peg$parseinteger();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c20;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c26(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequantifierRequired() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c27;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c29();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsequantifierAny() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c30;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c32();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsequantifierOptional() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c35();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parselazyFlag() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 63) {
        s0 = peg$c33;
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }

      return s0;
    }

    function peg$parsepossessiveFlag() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c27;
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c36.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (peg$c36.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c38(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesubexp() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c39;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== null) {
        s2 = peg$parsepositiveLookahead();
        if (s2 === null) {
          s2 = peg$parsenegativeLookahead();
          if (s2 === null) {
            s2 = peg$parsepositiveLookbehind();
            if (s2 === null) {
              s2 = peg$parsenegativeLookbehind();
              if (s2 === null) {
                s2 = peg$parseatomicGroup();
                if (s2 === null) {
                  s2 = peg$parsenamedGroupCapture();
                  if (s2 === null) {
                    s2 = peg$parsegroupFlagsNoCapture();
                    if (s2 === null) {
                      s2 = peg$parsegroupFlags();
                      if (s2 === null) {
                        s2 = peg$parsegroupNoCapture();
                        if (s2 === null) {
                          s2 = peg$parsegroupCapture();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c41;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c43(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegroupFlagsNoCapture() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            if (peg$c44.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c46;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s3 !== null) {
            s4 = peg$parseregexp();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c48(s2,s4);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegroupFlags() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            if (peg$c44.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c49(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsegroupCapture() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseregexp();
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c50(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsegroupNoCapture() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c51) {
        s1 = peg$c51;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      if (s1 !== null) {
        s2 = peg$parseregexp();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c53(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepositiveLookahead() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c54) {
        s1 = peg$c54;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s1 !== null) {
        s2 = peg$parseregexp();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c56(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenegativeLookahead() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c57) {
        s1 = peg$c57;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s1 !== null) {
        s2 = peg$parseregexp();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c59(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepositiveLookbehind() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== null) {
        s2 = peg$parseregexp();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c62(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenegativeLookbehind() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c63) {
        s1 = peg$c63;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s1 !== null) {
        s2 = peg$parseregexp();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c65(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseatomicGroup() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s1 !== null) {
        s2 = peg$parseregexp();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c68(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenamedGroupCapture() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsenamedGroupIndicator();
      if (s1 !== null) {
        s2 = peg$currPos;
        if (peg$c69.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        if (s3 !== null) {
          s4 = [];
          if (peg$c71.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          while (s5 !== null) {
            s4.push(s5);
            if (peg$c71.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c72); }
            }
          }
          if (s4 !== null) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c73;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
          if (s3 !== null) {
            s4 = peg$parseregexp();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c75(s2,s4);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenamedGroupIndicator() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c76) {
        s0 = peg$c76;
        peg$currPos += 3;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 2) === peg$c78) {
          s0 = peg$c78;
          peg$currPos += 2;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c79); }
        }
      }

      return s0;
    }

    function peg$parsecharset() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c81;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c82); }
      }
      if (s1 !== null) {
        if (input.charCodeAt(peg$currPos) === 94) {
          s2 = peg$c7;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s2 === null) {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parsecharClass();
          if (s4 === null) {
            s4 = peg$parsecharsetRange();
            if (s4 === null) {
              s4 = peg$parsecharsetTerminal();
            }
          }
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parsecharClass();
            if (s4 === null) {
              s4 = peg$parsecharsetRange();
              if (s4 === null) {
                s4 = peg$parsecharsetTerminal();
              }
            }
          }
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c83;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c84); }
            }
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c85(s2,s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }

      return s0;
    }

    function peg$parsecharsetRange() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsecharsetTerminal();
      if (s1 !== null) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c87;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s2 !== null) {
          s3 = peg$parsecharsetTerminal();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c89(s1,s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }

      return s0;
    }

    function peg$parsecharClass() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c91) {
        s1 = peg$c91;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s1 !== null) {
        if (input.substr(peg$currPos, 5) === peg$c93) {
          s2 = peg$c93;
          peg$currPos += 5;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c94); }
        }
        if (s2 === null) {
          if (input.substr(peg$currPos, 5) === peg$c95) {
            s2 = peg$c95;
            peg$currPos += 5;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
          if (s2 === null) {
            if (input.substr(peg$currPos, 5) === peg$c97) {
              s2 = peg$c97;
              peg$currPos += 5;
            } else {
              s2 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c98); }
            }
            if (s2 === null) {
              if (input.substr(peg$currPos, 5) === peg$c99) {
                s2 = peg$c99;
                peg$currPos += 5;
              } else {
                s2 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c100); }
              }
              if (s2 === null) {
                if (input.substr(peg$currPos, 5) === peg$c101) {
                  s2 = peg$c101;
                  peg$currPos += 5;
                } else {
                  s2 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c102); }
                }
                if (s2 === null) {
                  if (input.substr(peg$currPos, 5) === peg$c103) {
                    s2 = peg$c103;
                    peg$currPos += 5;
                  } else {
                    s2 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c104); }
                  }
                  if (s2 === null) {
                    if (input.substr(peg$currPos, 5) === peg$c105) {
                      s2 = peg$c105;
                      peg$currPos += 5;
                    } else {
                      s2 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c106); }
                    }
                    if (s2 === null) {
                      if (input.substr(peg$currPos, 5) === peg$c107) {
                        s2 = peg$c107;
                        peg$currPos += 5;
                      } else {
                        s2 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c108); }
                      }
                      if (s2 === null) {
                        if (input.substr(peg$currPos, 5) === peg$c109) {
                          s2 = peg$c109;
                          peg$currPos += 5;
                        } else {
                          s2 = null;
                          if (peg$silentFails === 0) { peg$fail(peg$c110); }
                        }
                        if (s2 === null) {
                          if (input.substr(peg$currPos, 5) === peg$c111) {
                            s2 = peg$c111;
                            peg$currPos += 5;
                          } else {
                            s2 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c112); }
                          }
                          if (s2 === null) {
                            if (input.substr(peg$currPos, 5) === peg$c113) {
                              s2 = peg$c113;
                              peg$currPos += 5;
                            } else {
                              s2 = null;
                              if (peg$silentFails === 0) { peg$fail(peg$c114); }
                            }
                            if (s2 === null) {
                              if (input.substr(peg$currPos, 6) === peg$c115) {
                                s2 = peg$c115;
                                peg$currPos += 6;
                              } else {
                                s2 = null;
                                if (peg$silentFails === 0) { peg$fail(peg$c116); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== null) {
          if (input.substr(peg$currPos, 2) === peg$c117) {
            s3 = peg$c117;
            peg$currPos += 2;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c118); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c119(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }

      return s0;
    }

    function peg$parsecharsetTerminal() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsecharsetEscapedCharacter();
      if (s0 === null) {
        s0 = peg$parsecharsetLiteral();
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }

      return s0;
    }

    function peg$parsecharsetLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c121.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c123(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsecharsetEscapedCharacter() {
      var s0;

      s0 = peg$parsebackspaceCharacter();
      if (s0 === null) {
        s0 = peg$parsecontrolCharacter();
        if (s0 === null) {
          s0 = peg$parsedigitCharacter();
          if (s0 === null) {
            s0 = peg$parsenon_digitCharacter();
            if (s0 === null) {
              s0 = peg$parseformFeedCharacter();
              if (s0 === null) {
                s0 = peg$parselineFeedCharacter();
                if (s0 === null) {
                  s0 = peg$parsecarriageReturnCharacter();
                  if (s0 === null) {
                    s0 = peg$parsewhiteSpaceCharacter();
                    if (s0 === null) {
                      s0 = peg$parsenonWhiteSpaceCharacter();
                      if (s0 === null) {
                        s0 = peg$parsetabCharacter();
                        if (s0 === null) {
                          s0 = peg$parseverticalTabCharacter();
                          if (s0 === null) {
                            s0 = peg$parsewordCharacter();
                            if (s0 === null) {
                              s0 = peg$parsenonWordCharacter();
                              if (s0 === null) {
                                s0 = peg$parseoctalCharacter();
                                if (s0 === null) {
                                  s0 = peg$parsehexCharacter();
                                  if (s0 === null) {
                                    s0 = peg$parseunicodeCharacter();
                                    if (s0 === null) {
                                      s0 = peg$parsenullCharacter();
                                      if (s0 === null) {
                                        s0 = peg$parseotherEscaped();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseterminal() {
      var s0;

      s0 = peg$parseanyCharacter();
      if (s0 === null) {
        s0 = peg$parseescapedCharacter();
        if (s0 === null) {
          s0 = peg$parseliteral();
        }
      }

      return s0;
    }

    function peg$parseanyCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c124;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c126();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseliteral() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c128.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c123(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }

      return s0;
    }

    function peg$parseescapedCharacter() {
      var s0;

      s0 = peg$parseword_boundaryCharacter();
      if (s0 === null) {
        s0 = peg$parsenonWord_boundaryCharacter();
        if (s0 === null) {
          s0 = peg$parsebeginOfString();
          if (s0 === null) {
            s0 = peg$parseendOfStringBeforeNL();
            if (s0 === null) {
              s0 = peg$parseendOfString();
              if (s0 === null) {
                s0 = peg$parsematchingStartPosition();
                if (s0 === null) {
                  s0 = peg$parsecontrolCharacter();
                  if (s0 === null) {
                    s0 = peg$parsedigitCharacter();
                    if (s0 === null) {
                      s0 = peg$parsenon_digitCharacter();
                      if (s0 === null) {
                        s0 = peg$parseformFeedCharacter();
                        if (s0 === null) {
                          s0 = peg$parselineFeedCharacter();
                          if (s0 === null) {
                            s0 = peg$parsecarriageReturnCharacter();
                            if (s0 === null) {
                              s0 = peg$parsewhiteSpaceCharacter();
                              if (s0 === null) {
                                s0 = peg$parsenonWhiteSpaceCharacter();
                                if (s0 === null) {
                                  s0 = peg$parsetabCharacter();
                                  if (s0 === null) {
                                    s0 = peg$parseverticalTabCharacter();
                                    if (s0 === null) {
                                      s0 = peg$parsewordCharacter();
                                      if (s0 === null) {
                                        s0 = peg$parsenonWordCharacter();
                                        if (s0 === null) {
                                          s0 = peg$parsebackReference();
                                          if (s0 === null) {
                                            s0 = peg$parseoctalCharacter();
                                            if (s0 === null) {
                                              s0 = peg$parsehexCharacter();
                                              if (s0 === null) {
                                                s0 = peg$parseunicodeCharacter();
                                                if (s0 === null) {
                                                  s0 = peg$parseunicodeCategory();
                                                  if (s0 === null) {
                                                    s0 = peg$parsenonUnicodeCategory();
                                                    if (s0 === null) {
                                                      s0 = peg$parsenullCharacter();
                                                      if (s0 === null) {
                                                        s0 = peg$parseotherEscaped();
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsebackspaceCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c130) {
        s1 = peg$c130;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c132();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseword_boundaryCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c130) {
        s1 = peg$c130;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c133();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsebeginOfString() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c134) {
        s1 = peg$c134;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c136();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseendOfStringBeforeNL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c137) {
        s1 = peg$c137;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c139();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseendOfString() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c140) {
        s1 = peg$c140;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c142();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsematchingStartPosition() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c143) {
        s1 = peg$c143;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c145();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenonWord_boundaryCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c146) {
        s1 = peg$c146;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c148();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsedigitCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c149) {
        s1 = peg$c149;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c150); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c151();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenon_digitCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c152) {
        s1 = peg$c152;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c154();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseformFeedCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c155) {
        s1 = peg$c155;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c157();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parselineFeedCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c158) {
        s1 = peg$c158;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c160();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsecarriageReturnCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c161) {
        s1 = peg$c161;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c162); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c163();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsewhiteSpaceCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c164) {
        s1 = peg$c164;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c166();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenonWhiteSpaceCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c167) {
        s1 = peg$c167;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c168); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c169();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsetabCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c170) {
        s1 = peg$c170;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c172();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseverticalTabCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c173) {
        s1 = peg$c173;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c174); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c175();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsewordCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c176) {
        s1 = peg$c176;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c178();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenonWordCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c179) {
        s1 = peg$c179;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c180); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c181();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsecontrolCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c182) {
        s1 = peg$c182;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 !== null) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c184); }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c185(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebackReference() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c186;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }
      if (s1 !== null) {
        if (peg$c188.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c189); }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c190(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseoctalCharacter() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c191) {
        s1 = peg$c191;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c193.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c194); }
        }
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            if (peg$c193.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c194); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c195(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehexCharacter() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c196) {
        s1 = peg$c196;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c197); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c198.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c199); }
        }
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            if (peg$c198.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c199); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c200(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseunicodeCharacter() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c201) {
        s1 = peg$c201;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c198.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c199); }
        }
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            if (peg$c198.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c199); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c203(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseunicodeCategory() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c204) {
        s1 = peg$c204;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c205); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c206.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c207); }
        }
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            if (peg$c206.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c207); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c20;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c208(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenonUnicodeCategory() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c209) {
        s1 = peg$c209;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c210); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c206.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c207); }
        }
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            if (peg$c206.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c207); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c20;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c211(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenullCharacter() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c191) {
        s1 = peg$c191;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c212();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseotherEscaped() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c186;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }
      if (s1 !== null) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c184); }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c123(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }


      Token.offset = offset
      Token.text = text


    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse      : parse
  };
})()

var index = 1
var cgs = {}
exports = (module.exports = parse)

function parse(str) {
  if (typeof str != 'string') {
    var ex = new TypeError('The regexp to parse must be represented as a string.')
    throw ex
  }
  //capture group index
  index = 1
  cgs = {}
  var result = parser.parse(str)
  for (var i = 0; i < str.length; i++) {
    if (cgs[i]) {
      cgs[i].index = index++;
    }
  }
  return result;
}
exports.parse = parse;


exports.Token = Token
function Token(type, obj) {
  this.type = type
  this.offset = Token.offset()
  this.text = Token.text()
}

// For some reason this is required in browser environments.
Token.offset = () => {
  return peg$reportedPos;
}
Token.text = () => {
  return input.substring(peg$reportedPos, peg$currPos);
}

exports.Alternate = Alternate
function Alternate(left, right) {
  Token.call(this, 'alternate')
  this.left = left
  this.right = right
}
Alternate.prototype = Object.create(Token.prototype)
Alternate.prototype.constructor = Alternate

exports.Match = Match
function Match(body) {
  Token.call(this, 'match')
  this.body = body.filter(Boolean)
}
Match.prototype = Object.create(Token.prototype)
Match.prototype.constructor = Match

exports.Group = Group
function Group(type, body) {
  Token.call(this, type)
  this.body = body
}
Group.prototype = Object.create(Token.prototype)
Group.prototype.constructor = Group

exports.CaptureGroup = CaptureGroup
function CaptureGroup(body, name) {
  Group.call(this, 'capture-group')

  // a bug means this gets called multiple times so memoize based on the offset
  cgs[this.offset] = this

  this.body = body
  if (name) this.name = name[0] + name[1].join('');
}
CaptureGroup.prototype = Object.create(Group.prototype)
CaptureGroup.prototype.constructor = CaptureGroup

exports.Quantified = Quantified
function Quantified(body, quantifier) {
  Token.call(this, 'quantified')
  this.body = body
  this.quantifier = quantifier
}
Quantified.prototype = Object.create(Token.prototype)
Quantified.prototype.constructor = Quantified

exports.Quantifier = Quantifier
function Quantifier(min, max) {
  Token.call(this, 'quantifier')
  this.min = min
  this.max = max
  this.lazy = false //initial setting
  this.possessive = false //initial setting
}
Quantifier.prototype = Object.create(Token.prototype)
Quantifier.prototype.constructor = Quantifier

exports.CharSet = CharSet
function CharSet(invert, body) {
  Token.call(this, 'charset')
  this.invert = invert
  this.body = body
}
CharSet.prototype = Object.create(Token.prototype)
CharSet.prototype.constructor = CharSet

exports.CharacterRange = CharacterRange
function CharacterRange(start, end) {
  Token.call(this, 'range')
  this.start = start
  this.end = end
}
CharacterRange.prototype = Object.create(Token.prototype)
CharacterRange.prototype.constructor = CharacterRange

exports.CharacterClass = CharacterClass
function CharacterClass(start, end) {
  Token.call(this, 'charclass')
  this.start = start
  this.end = end
}
CharacterClass.prototype = Object.create(Token.prototype)
CharacterClass.prototype.constructor = CharacterClass


exports.Literal = Literal
function Literal(body) {
  Token.call(this, 'literal')
  this.body = body
  this.escaped = this.body != this.text
}
Literal.prototype = Object.create(Token.prototype)
Literal.prototype.constructor = Literal

exports.Unicode = Unicode
function Unicode(code) {
  Token.call(this, 'unicode')
  this.code = code.toUpperCase()
}
Unicode.prototype = Object.create(Token.prototype)
Unicode.prototype.constructor = Unicode

exports.UnicodeCategory = UnicodeCategory
function UnicodeCategory(code, invert) {
  Token.call(this, 'unicode-category')
  this.code = code
  this.invert = invert
}
UnicodeCategory.prototype = Object.create(Token.prototype)
UnicodeCategory.constructor = Unicode

exports.Hex = Hex
function Hex(code) {
  Token.call(this, 'hex')
  this.code = code.toUpperCase()
}
Hex.prototype = Object.create(Token.prototype)
Hex.prototype.constructor = Hex

exports.Octal = Octal
function Octal(code) {
  Token.call(this, 'octal')
  this.code = code.toUpperCase()
}
Octal.prototype = Object.create(Token.prototype)
Octal.prototype.constructor = Octal

exports.BackReference = BackReference
function BackReference(code) {
  Token.call(this, 'back-reference')
  this.code = code.toUpperCase()
}
BackReference.prototype = Object.create(Token.prototype)
BackReference.prototype.constructor = BackReference

exports.ControlCharacter = ControlCharacter
function ControlCharacter(code) {
  Token.call(this, 'control-character')
  this.code = code.toUpperCase()
}
ControlCharacter.prototype = Object.create(Token.prototype)
ControlCharacter.prototype.constructor = ControlCharacter
